const Controller = require("./Controller");
const User = require("../Models/User");
const jwt = require('jsonwebtoken');

class UserController extends Controller {

    constructor(){
        super();
        this.secret = "hack4impact";
    }

    signup(req,res) {
        const newUser = new User({firstName: req.body.firstName, lastName:req.body.lastName, email: req.body.email, password: req.body.password});
        newUser.save(function(err){
            if (err) {
                console.log(err); 
                return res.send("Error creating user");
            }
            res.send("User created");
        })
    }

    login(req,res) {
        const username = (req.body.username).toLowerCase();
        const password = req.body.password;
        User.findOne({email: username}, function(err,user){
            if (user) {
                if (user.password == password) {
                    /* 
                    if we use tokens, we don't need to keep a separate table for sessions
                    because we can just verify the signature to ensure the token was generated by us by using a strong secret.
                    We can also set a short expiration date to decrease the likelihood of an imposter using an old token to act as the user.
                    */
                    const token = jwt.sign({user: user.id}, 'hack4impact', {expiresIn: '7d'});
                    console.log("Sending token:");
                    console.log(token);
                    res.send({token: token, userId: user.id});
                }
                else {
                    res.send("Incorrect username or password");
                }
            }
            else {
                console.log("Error " + err);
                res.send("Error authenticating user")
            }
        })
    }

    setSocketId(token, socketId) {
        const decodedToken = jwt.verify(token, 'hack4impact');
        const userId = decodedToken.user;
        User.findById(userId).then(user => {
            if (user) {
                user.socketId = socketId;
                user.save();
            }
            else {
                console.log("could not find user");
            }
        })
    }
    
    async getSocketId(userId) {
        const user = await User.findById(userId);
        if (user) {
            return user.socketId;
        }
        else {
            return null;
        }
    }

    async getUsernameById(userId, res=null) {
        const user = await User.findById(userId); // == User.findOne(_id: userId)
        if (user) {
            if (res) {
                res.send({username: user.email})
            }
            return user.email;
        }
        else {
            if (res) {
                res.sendStatus(403);
            }
            return null;
        }
    }

    async getUserIdbyUsername(username, res=null) {
        const user = await User.findOne({email: username});
        if (user) {
            if (res) {
                res.send({userId: user._id})
            }
            return user.email;
        }
        else {
            if (res) {
                res.sendStatus(404);
            }
            return null;
        }
    }
    async decodeToken(token) {
        try {
            const decodedToken = jwt.verify(token, this.secret);
            const tokenHolder = await User.findById(decodedToken.user);
            if (!tokenHolder) {
                return false;
            }
            return decodedToken;
        }
        catch(err) {
            return false;
        }
    }

    /*
    If function not called with a request, 
    @Returns
    true if decodedToken is valid or false if it is invalid

    If function is called with a request,
    returns http status code 200 if token is valid or 401 otherwise
    */
    async verifyToken(token, res = null){
        
        const decodedToken = await this.decodeToken(token);
        console.log("decodedToken " + decodedToken);
        if (res) {
            if (decodedToken) {
                console.log("sending 200");
                console.log("user: " + decodedToken.user);
                res.send({status: 200, userId: decodedToken.user});
            }
            else {
                console.log("sending 401");
                res.send({status: 401});
            }
            return;
        }
        else {
            return (decodedToken ? true : false);
        }
    }

    async verifyTokenAndReturnUsername(token) {
        const decodedToken = await this.decodeToken(token);
        if (!decodedToken) {
            return null;
        }
        const username = await this.getUsernameById(decodedToken.user);
        return username;
    }

    async verifyTokenAndReturnUserId(token) {
        const decodedToken = await this.decodeToken(token);
        if (!decodedToken) {
            return null;
        }
        return decodedToken.user
    }
}

module.exports = UserController